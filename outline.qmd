---
toc: true
title: Table Course Outline
date-last-modified: today
theme: theme.scss
execute: 
  message: false
  warning: false
---

# Lessons

The first set of lessons will work with `{flextable}`. The second set of lessons will cover the same topics but will use `{reactable}` instead. This way, students learn one package with good export capability to MS Office and one package for interactive tables.

## Lesson 1: Get data into right format

### Video Overview

The first lesson is about getting the data to the right format before we can even begin to build the table. Regardless of what package you use to create the table, it will just take your data frame and put it into a table as it is. Thus, you need to rearrange that data in your data frame before even calling, say, `flextable()`.

The most powerful function to get this job done are `pivot_wider()` and `pivot_longer()`, they are able to transition the data frame from long format to white format and vice versa.

```{r}
library(tidyverse)
penguins <- palmerpenguins::penguins |> 
  filter(!is.na(sex))
penguins

penguin_counts <- penguins |> 
  mutate(year = as.character(year)) |> 
  group_by(species, island, sex, year) |> 
  summarise(n = n(), .groups = 'drop')
penguin_counts

penguin_counts_wider <- penguin_counts |> 
  pivot_wider(
    names_from = c(species, sex),
    values_from = n
  ) |> 
  arrange(island, year) 
penguin_counts_wider


# For demo purposes revert with pivot_longer()
penguin_counts_wider |> 
  pivot_longer(
    cols = -(1:2),
    names_to = c('species', 'sex'),
    names_sep = '_'
  )
```

### Your Turn Exercise

```{r}
gapminder_data <- gapminder::gapminder |> 
  janitor::clean_names() |> 
  select(continent, country, year, life_exp) |> 
  mutate(
    year = as.character(year),
    # Year is really categorical with numeric labels
    country = as.character(country) 
  ) 
gapminder_data

set.seed(34534)
selected_countries <- gapminder_data  |> 
# Filter to use only six years (those that end in 7)
  filter(str_ends(year, "7")) |>
# sample two countries per continent
  group_by(continent, country) |> 
  nest() |> 
  group_by(continent) |> 
  slice_sample(n = 2) |> 
  ungroup() |> 
  unnest(data) |> 
# Rearrange the data into table format
  pivot_wider(names_from = year, names_prefix = 'year', values_from = life_exp)
selected_countries
```

### Code and Video solutions

### Learn more

## Lesson 2: Avoid vertical lines with `flextable()`

### Video Overview

Call `flextable()` and review that it's good to avoid vertical lines. Also, call `autofit()` so that column widths are adjust to some optimum.

```{r}
library(flextable)
library(officer) # Load as well for later theming.

flextable(penguin_counts_wider) |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  flextable() |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 3: Use better column names and a title

### Video Overview

Next up, we need to use better column names. That's because `flextable()` prints a data frame as is. Consequently, column names may not really be human readable at all. For example, column names may contain underscores or some other kind of unusual notation.

While we're at it, we should avoid duplicating a lot of column names. For example, in this example, we see that we always repeat the species name. To avoid that it's best to add a novel row of so-called spanners. Furthermore, we should add one more important label, i.e. a title.

```{r}
flextable(penguin_counts_wider) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(2, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  autofit()
```

Alternative

```{r}
new_names <- c('Island', 'Year', rep(c('Female', 'Male'), 3))
names(new_names) <- colnames(penguin_counts_wider)

flextable(penguin_counts_wider) |> 
  set_header_labels(
    values = new_names
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(2, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  flextable() |> 
  set_header_labels(
    continent = '',
    country = '',
    year1957 = '1957',
    year1967 = '1967',
    year1977 = '1977',
    year1987 = '1987',
    year1997 = '1997',
    year2007 = '2007'
  ) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(2, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  autofit()
```

```{r}
new_names <- c('', '', seq(1957, 2007, 10))
names(new_names) <- colnames(selected_countries)

selected_countries |> 
  flextable() |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(2, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  autofit()

```

### Code and Video solutions

### Learn more

## Lesson 4: Align columns

### Video Overview

Next step is to align columns. As you as you can see, for example, in our spanners, the cells use right aligned texts. That's not particularly nice to read, especially because this species name should always refer to the two cells below it. So it would be great if the text in that cell is centered.

For readability of your tables certain data types should use different alignments. For example, for texts it's best if you use left alignment. That's because we read from left to right and if all the texts are aligned at the same vertical line, then it's easier to read. Otherwise, our eyes always have to find the beginning of the next line.

For numbers it's different. There, you should move everything to the right. This way, you can easily compare digits one by one.

```{r}
flextable(penguin_counts_wider) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(2, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  # it's already left-aligned but for demo purposes we do it again
  align(j = 'year', align = 'right', part = 'body') |> 
  autofit()
```

### Your Turn Exercise

Center the spanners

```{r}
selected_countries |> 
  flextable() |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(2, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 5: Use groups instead of repetitive columns

### Video Overview

Next, it's better to use groups instead of repetitive columns. For instance, the island column repeats itself multiple times before we move on to the next island name. This is a doesn't really look good. And it would be nice if we can just make it visually clearer that certain rows belong to certain islands.

The way to do that is to use groups. This means that we have rows (one for each island) that spans all of the columns. Here, we'll transition to `as_flextable()` because I like `hide_grouplabel`. But I'll show the `flextable()` version before that.

```{r}
penguin_counts_wider |> 
  as_grouped_data(
    groups = 'island'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 6: Make missing numbers into dashes (Maybe this is column formatting already)

### Video Overview

Notice that our table contains a lot of missing numbers. That's fine but leaving a lot of white space may be off putting to the reader. So, let's add small dashes to the empty cells.

This demonstrates how to format missing numbers, but it also explains how format any kind of data. Also, this will introduce formulas for selecting specific cells in the table.

```{r}
penguin_counts_wider |> 
  as_grouped_data(
    groups = 'island'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = 'Penguins in the Palmer Archipelago\nData is courtesy of the {palmerpenguins} R package'
  ) |> 
  align(i = 2, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  autofit()
```

### Your Turn Exercise

Format digits with `colformat_double()`.

```{r}
selected_countries |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 7: Add summaries

### Video Overview

It's always good to not just show the data, but to also to show a summary of the data. In this case, it could be something as simple as the maximum number of penguins of a specific species living on an island over the years.

```{r}

maximum_summary <- penguin_counts_wider |> 
  group_by(island) |> 
  summarise(across(
    .cols = -year,
    .fns = max
  )) |> 
  mutate(year = 'Maximum')

total_summary <- penguin_counts_wider |> 
  group_by(island) |> 
  summarise(across(
    .cols = -year,
    .fns = sum
  )) |> 
  mutate(year = 'Total')
  

bind_rows(penguin_counts_wider, maximum_summary, total_summary) |> 
  arrange(island, year) |> 
  as_grouped_data(groups = 'island') |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  align(
    i = ~ (year %in% 2007:2009),
    j = 'year',
    align = 'right'
  ) |> 
  autofit()
```

### Your Turn Exercise

```{r}
average_life_exps <- gapminder_data |> 
  filter(country %in% selected_countries$country, str_ends(year, '7')) |> 
  group_by(continent, year) |> 
  summarise(Average = mean(life_exp), .groups = 'drop') |> 
  pivot_wider(names_from = year, values_from = Average, names_prefix = 'year') |> 
  mutate(country = 'Average', .before = 2)

max_life_exps <- gapminder_data |> 
  filter(country %in% selected_countries$country, str_ends(year, '7')) |> 
  group_by(continent, year) |> 
  summarise(Maximum = max(life_exp), .groups = 'drop') |> 
  pivot_wider(names_from = year, values_from = Maximum, names_prefix = 'year') |> 
  mutate(country = 'Maximum', .before = 2)

selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 8: Add additional horizontal lines

### Video Overview

We've arrived at the probably the most fun lesson in this part of the course which is about theming and making the table more pretty. We'll start by adding more lines to distinguish our summaries from the rest.

```{r}
bind_rows(penguin_counts_wider, maximum_summary, total_summary) |> 
  arrange(island, year) |> 
  as_grouped_data(groups = 'island') |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  align(
    i = ~ (year %in% 2007:2009),
    j = 'year',
    align = 'right'
  ) |> 
  hline(i = ~ (!is.na(island) | year %in% c('2009', 'Total'))) |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  hline(i = ~ (!is.na(continent) | country == 'Maximum' | lead(country == 'Maximum', 2, default = FALSE))) |> 
  autofit()
```

### Code and Video solutions

### Learn more

## Lesson 9: Add background colors

### Video Overview

Next, we want to bring a little bit color into our table. Right now it's all black and white and this looks really dull.

```{r}
bind_rows(penguin_counts_wider, maximum_summary, total_summary) |> 
  arrange(island, year) |> 
  as_grouped_data(groups = 'island') |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  align(
    i = ~ (year %in% 2007:2009),
    j = 'year',
    align = 'right'
  ) |> 
  hline(i = ~ (!is.na(island) | year %in% c('2009', 'Total'))) |> 
  bg(i = 3:4, bg = 'dodgerblue4', part = 'header') |> 
  bg(i = ~ (year %in% seq(2007, 2009, 2)), bg = 'grey90') |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  hline(i = ~ (!is.na(continent) | country == 'Maximum' | lead(country == 'Maximum', 2, default = FALSE))) |> 
  bg(i = ~ is.na(country), bg = 'dodgerblue4') |> 
  bg(i = ~ (country %in% c('Average', 'Maximum')), bg = 'grey95') |> 
  autofit() 
```

### Code and Video solutions

### Learn more

## Lesson 10: Change text appearance

### Video Overview

This will introduce `bold()`, `color()`, `style()` and `fp_text()` (from `{officer}`)

```{r}
bind_rows(penguin_counts_wider, maximum_summary, total_summary) |> 
  arrange(island, year) |> 
  mutate(island = paste('Island: ', island)) |> 
  as_grouped_data(groups = 'island') |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  align(
    i = ~ (year %in% 2007:2009),
    j = 'year',
    align = 'right'
  ) |> 
  hline(i = ~ (!is.na(island) | year %in% c('2009', 'Total'))) |> 
  bg(i = 3:4, bg = 'dodgerblue4', part = 'header') |> 
  bg(i = ~ (year %in% seq(2007, 2009, 2)), bg = 'grey90') |> 
  bold(part = 'header', i = 3) |> 
  color(i = 3:4, part = 'header', color = 'white') |> 
  style( #### subtitle
    part = 'header',
    i = 2,
    pr_t = fp_text(font.size = 10),
  ) |>
  style( ### title
    part = 'header',
    i = 1,
    pr_t = fp_text(
      color = 'dodgerblue4',
      font.size = 18,
      font.family = 'Merriweather',
      bold = TRUE
    )
  ) |> 
  style( ### group rows
    i = ~ (!is.na(island)),
    pr_t = fp_text(
      color = 'dodgerblue4',
      bold = TRUE,
      font.size = 12,
    )
  ) |> 
  autofit()
```

### Your Turn Exercise

```{r}
selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  hline(i = ~ (!is.na(continent) | country == 'Maximum' | lead(country == 'Maximum', 2, default = FALSE))) |> 
  bg(i = ~ is.na(country), bg = 'dodgerblue4') |> 
  bg(i = ~ (country %in% c('Average', 'Maximum')), bg = 'grey95') |> 
  style(pr_t = fp_text(font.family = 'Source Sans Pro'), part = 'all') |> 
  bold(part = 'header', i = 3) |> 
  style( ### group rows
    i = ~ (is.na(country)),
    pr_t = fp_text(
      color = 'white',
      bold = TRUE,
      font.size = 12,
    )
  ) |> 
  style( ### title
    part = 'header',
    i = 1,
    pr_t = fp_text(
      color = 'dodgerblue4',
      font.size = 18,
      font.family = 'Source Sans Pro',
      bold = TRUE
    )
  ) |> 
  autofit() 
```

### Code and Video solutions

### Learn more

## Lesson 11: Change cell properties

### Video Overview

This will introduce `border()`, `line_spacing()`, `fp_cell()` and `fp_border()`.

```{r}
final_table <- bind_rows(penguin_counts_wider, maximum_summary, total_summary) |> 
  arrange(island, year) |> 
  mutate(island = paste('Island: ', island)) |> 
  as_grouped_data(groups = 'island') |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(
    island = 'Island',
    year = 'Year',
    Adelie_female = 'Female',
    Adelie_male = 'Male',
    Chinstrap_female = 'Female',
    Chinstrap_male = 'Male',
    Gentoo_female = 'Female',
    Gentoo_male = 'Male'
  ) |> 
  add_header_row(
    values = c('', 'Adelie', 'Chinstrap', 'Gentoo'),
    colwidths = c(1, 2, 2, 2)
  ) |> 
  add_header_lines(
    values = c('Penguins in the Palmer Archipelago', 'Data is courtesy of the {palmerpenguins} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_num(i = ~ (is.na(island)), na_str = '-') |> 
  align(
    i = ~ (year %in% 2007:2009),
    j = 'year',
    align = 'right'
  ) |> 
  hline(i = ~ (!is.na(island) | year %in% c('2009', 'Total')), border = fp_border(width = 1, color = 'grey40')) |> 
  bg(i = 3:4, bg = 'dodgerblue4', part = 'header') |> 
  bg(i = ~ (year %in% seq(2007, 2009, 2)), bg = 'grey90') |> 
  bold(part = 'header', i = 3) |> 
  color(i = 3:4, part = 'header', color = 'white') |> 
  border(j = 'year', border.right = fp_border(color = 'grey40', width = 1)) |> 
  style( #### subtitle
    part = 'header',
    i = 2,
    pr_t = fp_text(font.size = 11),
    ### This part is added 
    pr_c = fp_cell(border = fp_border(width = 0, color = 'grey40'))
  ) |>
  style( ### title
    part = 'header',
    i = 1,
    pr_t = fp_text(
      color = 'dodgerblue4',
      font.size = 18,
      font.family = 'Merriweather',
      bold = TRUE
    ),
    ### This part is added 
    pr_c = fp_cell(
      border.top = fp_border(width = 1.5, color = 'grey40'),
      border.bottom = fp_border(width = 0, color = 'grey40')
    )
  ) |> 
  style( ### group rows
    i = ~ (!is.na(island)),
    ### This part is added 
    pr_c = fp_cell(
      border.top = fp_border(width = 1, color = 'grey40'),
      border.bottom = fp_border(width = 1, color = 'grey40'),
      border.right = fp_border(width = 0, color = 'grey40')
    ),
    pr_t = fp_text(
      color = 'dodgerblue4',
      bold = TRUE,
      font.size = 12,
    )
  ) |> 
  line_spacing(part= 'all', space = 0.9) |> 
  ### This part is added 
  hline(part = 'header', i = 2, border = fp_border(width = 0)) |> 
  hline(part = 'header', i = 3, border = fp_border(width = 0)) |> 
  autofit()
final_table
```

### Your Turn Exercise

```{r}
final_table_exercises <- selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s'),
    colwidths = c(1, 3, 3)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  hline(i = ~ (!is.na(continent) | country == 'Maximum' | lead(country == 'Maximum', 2, default = FALSE))) |> 
  bg(i = ~ is.na(country), bg = 'dodgerblue4') |> 
  bg(i = ~ (country %in% c('Average', 'Maximum')), bg = 'grey95') |> 
  style(pr_t = fp_text(font.family = 'Source Sans Pro'), part = 'all') |> 
  bold(part = 'header', i = 3) |> 
  style( ### group rows
    i = ~ (is.na(country)),
    pr_t = fp_text(
      color = 'white',
      bold = TRUE,
      font.size = 12,
    )
  ) |> 
  style( ### title
    part = 'header',
    i = 1,
    pr_t = fp_text(
      color = 'dodgerblue4',
      font.size = 18,
      font.family = 'Source Sans Pro',
      bold = TRUE
    ),
    pr_c = fp_cell(
      border.top = fp_border(width = 1.5, color = 'grey40'),
      border.bottom = fp_border(width = 0, color = 'grey40')
    )
  ) |> 
  style( #### subtitle
    part = 'header',
    i = 2,
    pr_t = fp_text(font.size = 11),
    ### This part is added 
    pr_c = fp_cell(border = fp_border(width = 0, color = 'grey40'))
  ) |> 
  line_spacing(part= 'all', space = 0.75) |> 
  ### This part is added 
  hline(part = 'header', i = 2, border = fp_border(width = 0)) |> 
  hline(part = 'header', i = 3, border = fp_border(width = 0)) |> 
  border(i = 3, j = 2:7, border.bottom = fp_border(width = 1, color = 'grey40'), part = 'header') |> 
  autofit() 
final_table_exercises
```

### Code and Video solutions

### Learn more

## Lesson 12: Export

### Video Overview

Pretty straightforward what will happen here

```{r}
save_as_docx(
  final_table,
  path = 'final_table.docx'
)

# Make sure that you have {webshot2} and phantomJS installed. The latter can be installed via {webshot2}
save_as_image(
  final_table,
  path = 'final_table.png',
  webshot = 'webshot2'
)

# Beware that in the output pptx file there can be empty cells that have huge font. 
# This will cause the line heights of the cells to be large. 
# You have to manually tweak this.
save_as_pptx(
  final_table,
  path = 'final_table.pptx'
)
```

### Your Turn Exercise

```{r}
save_as_docx(
  final_table_exercises,
  path = 'final_table_exercises.docx'
)

# Make sure that you have {webshot2} and phantomJS installed. The latter can be installed via {webshot2}
save_as_image(
  final_table_exercises,
  path = 'final_table_exercises.png',
  webshot = 'webshot2'
)

# Beware that in the output pptx file there can be empty cells that have huge font. 
# This will cause the line heights of the cells to be large. 
# You have to manually tweak this.
save_as_pptx(
  final_table_exercises,
  path = 'final_table_exercises.pptx'
)
```

### Code and Video solutions

### Learn more

## Lesson 13: Heatmap columns

### Video Overview

This lesson covers heat maps. These are tables where one, multiple or all cells have a background color which is chosen according to some numeric value Heat maps are great for helping your reader find the important values or the high or low values immediately.

```{r}
bg_color_fct <- scales::col_numeric(palette = "viridis", domain = c(0, 30), na.color = 'white')
text_color_fct <- function(x) if_else(x < 20 & !is.na(x), 'white', 'black')

## Source needs to take the grouped data into account. That's why it's shifted by one.
final_table |> 
  bg(i = ~(year %in% 2007:2009), j = 2:7, bg = bg_color_fct, source = 3:8) |> 
  color(i = ~(year %in% 2007:2009), j = 2:7, color = text_color_fct,source = 3:8) 
```

### Your Turn Exercise

```{r}
bg_color_fct <- scales::col_numeric(palette = "viridis", domain = c(0, 30, 85), na.color = 'white')
text_color_fct <- function(x) if_else(x < 50 & !is.na(x), 'white', 'black')

## Source needs to take the grouped data into account. That's why it's shifted by one.
final_table_exercises |> 
  bg(i = ~!(country %in% c('Average', 'Maximum')), j = c(2, 7), bg = bg_color_fct, source = c(3, 8)) |> 
  color(i = ~!(country %in% c('Average', 'Maximum')), j = c(2, 7), color = text_color_fct, source = c(3, 8)) 
```

### Code and Video solutions

### Learn more

## Lesson 14: Sparklines

### Video Overview

Sparklines are small lines that help you to find trends in the data really fast. By now, they're one of the standard tricks in the table trade.

```{r}
counts_over_time <- penguin_counts |> 
  group_by(species, island, sex) |> 
  summarise(collected_data = list(n)) |> 
  ungroup()


counts_over_time |> 
  flextable() |> 
  compose(j = 'collected_data', value = as_paragraph(
    plot_chunk(value = collected_data, type = 'line', col = 'dodgerblue4')
  ))


penguin_mass <- penguins |> 
  group_by(species) |> 
  summarise(body_masses = list(body_mass_g)) |> 
  ungroup()

penguin_mass |> 
  flextable() |> 
  compose(
    j = 'body_masses',
    value = as_paragraph(
      plot_chunk(
        value = body_masses,
        type = 'dens',
        col = 'dodgerblue4',
        width = 3,
        height = 1
      )
    )
  )
```

### Your Turn Exercise

```{r}
life_exp_over_time <- gapminder_data |> 
  filter(country %in% selected_countries$country, str_ends(year, '7')) |> 
  group_by(country) |> 
  summarise(life_exps = list(life_exp))


selected_countries |> 
  bind_rows(average_life_exps, max_life_exps) |> 
  full_join(life_exp_over_time) |> 
  arrange(continent, country %in% c('Average', 'Maximum')) |> 
  as_grouped_data(
    groups = 'continent'
  ) |> 
  as_flextable(hide_grouplabel = TRUE) |> 
  set_header_labels(values = new_names) |> 
  set_header_labels(life_exps = '') |> 
  add_header_row(
    values = c('', '50s-70s', '80s-20s', ''),
    colwidths = c(1, 3, 3, 1)
  ) |> 
  add_header_lines(
    values = c('Life expectancties over time', 'Data is courtesy of the {gapminder} R package')
  ) |> 
  align(i = 3, align = 'center', part = 'header') |> 
  colformat_double(digits = 2) |> 
  hline(i = ~ (!is.na(continent) | country == 'Maximum' | lead(country == 'Maximum', 2, default = FALSE))) |> 
  bg(i = ~ is.na(country), bg = 'dodgerblue4') |> 
  bg(i = ~ (country %in% c('Average', 'Maximum')), bg = 'grey95') |> 
  style(pr_t = fp_text(font.family = 'Source Sans Pro'), part = 'all') |> 
  bold(part = 'header', i = 3) |> 
  style( ### group rows
    i = ~ (is.na(country)),
    pr_t = fp_text(
      color = 'white',
      bold = TRUE,
      font.size = 12,
    )
  ) |> 
  style( ### title
    part = 'header',
    i = 1,
    pr_t = fp_text(
      color = 'dodgerblue4',
      font.size = 18,
      font.family = 'Source Sans Pro',
      bold = TRUE
    ),
    pr_c = fp_cell(
      border.top = fp_border(width = 1.5, color = 'grey40'),
      border.bottom = fp_border(width = 0, color = 'grey40')
    )
  ) |> 
  style( #### subtitle
    part = 'header',
    i = 2,
    pr_t = fp_text(font.size = 11),
    ### This part is added 
    pr_c = fp_cell(border = fp_border(width = 0, color = 'grey40'))
  ) |> 
  line_spacing(part= 'all', space = 0.75) |> 
  ### This part is added 
  hline(part = 'header', i = 2, border = fp_border(width = 0)) |> 
  hline(part = 'header', i = 3, border = fp_border(width = 0)) |> 
  border(i = 3, j = 2:7, border.bottom = fp_border(width = 1, color = 'grey40'), part = 'header') |> 
  compose(i = ~ !(country %in% c('Average', 'Maximum') | is.na(country)), j = 'life_exps', value = as_paragraph(
    plot_chunk(value = life_exps, type = 'line', col = 'dodgerblue4')
  )) |> 
  compose(i = ~ (country %in% c('Average', 'Maximum') | is.na(country)), j = 'life_exps', value = as_paragraph('')) |> 
  autofit()

```

### Code and Video solutions

### Learn more

## Lesson 15: Add your own ggplot

### Video Overview

Let's redo our own density plots.

```{r}
single_species_weights <- penguin_mass$body_masses[[1]]

gg_density_plot <- function(weights) {
  ggplot() +
    stat_density(aes(x = weights), fill = 'dodgerblue4', col = 'grey20') +
    coord_cartesian(xlim = range(penguins$body_mass_g)) +
    theme_void()
}


list_of_ggplots <- map(penguin_mass$body_masses, gg_density_plot)


penguin_mass |> 
  flextable() |> 
  compose(
    j = 'body_masses',
    value = as_paragraph(
      gg_chunk(
        value = list_of_ggplots,
        width = 3,
        height = 1
      )
    )
  )
```

```{r}
gg_density_box_plot <- function(weights) {
  ggplot(mapping = aes(x = weights)) +
    stat_density(fill = 'dodgerblue4', col = 'grey20') +
    geom_boxplot(width = 0.0005, position = position_nudge(y = -0.0005)) +
    coord_cartesian(xlim = range(penguins$body_mass_g)) +
    theme_void()
}

list_of_ggplots <- map(penguin_mass$body_masses, gg_density_box_plot)


penguin_mass |> 
  flextable() |> 
  compose(
    j = 'body_masses',
    value = as_paragraph(
      gg_chunk(
        value = list_of_ggplots,
        width = 3,
        height = 1
      )
    )
  )

```

### Your Turn Exercise

### Code and Video solutions

### Learn more

Images and some more mini charts at https://ardata-fr.github.io/flextable-book/cell-content-1.html#images

## Lesson 16: Case study (Either a long video or split into parts)

### Video Overview

Take a NYT table or something from FiveThirtyEight

### Your Turn Exercise

Will there be a Your Turn? Or is it just follow along?

### Code and Video solutions

### Learn more

## Lessons 17-33: Same stuff but for {reactable}

Same data set as before for consistency + one-to-one comparison? Or new data set for novelty?

## Lessons 33-35: Maybe some interactive specifics
